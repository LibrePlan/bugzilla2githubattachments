From 1209809a9254e4b65a8a32b409fe14e4343562fb Mon Sep 17 00:00:00 2001
Message-Id: <1209809a9254e4b65a8a32b409fe14e4343562fb.1296821930.git.dpino@igalia.com>
From: Diego Pino Garcia <dpino@igalia.com>
Date: Fri, 4 Feb 2011 13:18:10 +0100
Subject: [PATCH 1/2] Use English as default language (don't depend on server configuration)
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------1.7.0.4"

This is a multi-part message in MIME format.
--------------1.7.0.4
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit

---
 .../main/java/org/navalplanner/web/I18nHelper.java |   31 ++++++++++++++++----
 1 files changed, 25 insertions(+), 6 deletions(-)


--------------1.7.0.4
Content-Type: text/x-patch; name="0001-Use-English-as-default-language-don-t-depend-on-serv.patch"
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename="0001-Use-English-as-default-language-don-t-depend-on-serv.patch"

diff --git a/navalplanner-webapp/src/main/java/org/navalplanner/web/I18nHelper.java b/navalplanner-webapp/src/main/java/org/navalplanner/web/I18nHelper.java
index cdeb661..dc59791 100644
--- a/navalplanner-webapp/src/main/java/org/navalplanner/web/I18nHelper.java
+++ b/navalplanner-webapp/src/main/java/org/navalplanner/web/I18nHelper.java
@@ -31,22 +31,43 @@ import org.zkoss.util.Locales;
 
 public class I18nHelper {
 
+    private static Locale defaultLang = Locale.ENGLISH;
 
     private static HashMap<Locale, I18n> localesCache = new HashMap<Locale, I18n>();
 
     public static I18n getI18n() {
-        if (localesCache.keySet().contains(Locales.getCurrent())) {
-            return localesCache.get(Locales.getCurrent());
+
+        Locale locale = Locales.getCurrent();
+        if (localesCache.keySet().contains(locale)) {
+            return localesCache.get(locale);
         }
 
-        I18n i18n = I18nFactory.getI18n(I18nHelper.class, Locales
-                .getCurrent(),
+        I18n i18n = I18nFactory.getI18n(I18nHelper.class, locale,
                 org.xnap.commons.i18n.I18nFactory.FALLBACK);
+
+        // The language returned is not the same as the requested by the user
+        if (!locale.equals(i18n.getLocale())) {
+            // Force it to be default language
+            i18n = getDefaultI18n();
+        }
         localesCache.put(Locales.getCurrent(), i18n);
 
         return i18n;
     }
 
+    private static I18n getDefaultI18n() {
+        I18n i18n = localesCache.get(defaultLang);
+        if (i18n == null) {
+            i18n = I18nFactory.getI18n(I18nHelper.class, defaultLang,
+                    org.xnap.commons.i18n.I18nFactory.FALLBACK);
+        }
+        return i18n;
+    }
+
+    private I18nHelper() {
+
+    }
+
     public static String _(String str) {
         return getI18n().tr(str);
     }
@@ -72,6 +93,4 @@ public class I18nHelper {
         return getI18n().tr(text, objects);
     }
 
-    private I18nHelper() {
-    }
 }

--------------1.7.0.4--


